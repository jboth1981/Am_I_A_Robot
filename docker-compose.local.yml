# Local Development Configuration
# Uses nginx:alpine with custom config and self-signed certificates

services:
  database:
    image: postgres:15-alpine
    container_name: postgres_local
    environment:
      POSTGRES_DB: am_i_a_robot_local
      POSTGRES_USER: robot_user
      POSTGRES_PASSWORD: local_password
      # Memory optimization settings
      POSTGRES_SHARED_BUFFERS: 64MB
      POSTGRES_EFFECTIVE_CACHE_SIZE: 128MB
      POSTGRES_WORK_MEM: 4MB
      POSTGRES_MAINTENANCE_WORK_MEM: 16MB
      POSTGRES_MAX_CONNECTIONS: 20
      POSTGRES_CHECKPOINT_COMPLETION_TARGET: 0.9
    ports:
      - "5432:5432"
    volumes:
      - postgres_local_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
    networks:
      - web
    restart: unless-stopped

  nginx-proxy:
    image: nginx:alpine
    container_name: nginx_proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./certs:/etc/nginx/certs:ro
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
    depends_on:
      - frontend
      - backend
    networks:
      - web

  backend:
    build:
      context: ./backend
    container_name: fastapi_backend
    expose:
      - "8000"
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
    environment:
      DATABASE_URL: postgresql://robot_user:local_password@database:5432/am_i_a_robot_local
      RESEND_API_KEY: ${RESEND_API_KEY}
      MAIL_FROM: onboarding@resend.dev
      # Python memory optimization
      PYTHONUNBUFFERED: 1
      PYTHONDONTWRITEBYTECODE: 1
    command: ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000"]
    deploy:
      resources:
        limits:
          memory: 1024M
        reservations:
          memory: 512M
    depends_on:
      - database
    networks:
      - web

  frontend:
    build:
      context: ./frontend
      target: development
    container_name: react_frontend_new
    expose:
      - "3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      # Node.js memory optimization
      NODE_ENV: development
      NODE_OPTIONS: "--max-old-space-size=2048"
      # WebSocket and file watching handled by CRACO
      FAST_REFRESH: true
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G
    stdin_open: true
    tty: true
    networks:
      - web

networks:
  web:
    driver: bridge

volumes:
  postgres_local_data: 