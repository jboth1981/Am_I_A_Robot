# Docker Compose for Transformer Training
# This sets up a training environment that can access your database

services:
  transformer-training:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: transformer_training
    volumes:
      # Mount the training source code
      - ./src:/app/src
      # Mount shared model directory for ML components
      - ../shared_model:/app/shared_model
      # Mount backend models for database access
      - ../backend/app:/app/backend_app
      # Mount backend models directory for automatic deployment
      - ../models:/app/backend_models
      # Mount a models directory for training outputs (local)
      - ./models:/app/models
      # Mount a data directory for training data exports
      - ./data:/app/data
    environment:
      # Database connection (connects to your existing database)
      - DATABASE_URL=postgresql://robot_user:local_password@postgres_local:5432/am_i_a_robot_local
      # Python settings
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
    networks:
      - web
    # Resource limits for training
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 2G
    # Don't start automatically - run manually when needed
    profiles:
      - training

  # GPU version (requires nvidia-docker)
  transformer-training-gpu:
    build:
      context: .
      dockerfile: Dockerfile.gpu
    container_name: transformer_training_gpu
    volumes:
      - ./src:/app/src
      - ../shared_model:/app/shared_model
      - ../backend/app:/app/backend_app
      - ../models:/app/backend_models
      - ./models:/app/models
      - ./data:/app/data
    environment:
      - DATABASE_URL=postgresql://robot_user:local_password@postgres_local:5432/am_i_a_robot_local
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
      - CUDA_VISIBLE_DEVICES=0
    networks:
      - web
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    profiles:
      - training-gpu

  # Your existing database service (referenced from main compose file)
  database:
    image: postgres:15-alpine
    container_name: postgres_local
    environment:
      POSTGRES_DB: am_i_a_robot_local
      POSTGRES_USER: robot_user
      POSTGRES_PASSWORD: local_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_local_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - web
    restart: unless-stopped

networks:
  web:
    external: true
    name: am_i_a_robot_web

volumes:
  postgres_local_data:
